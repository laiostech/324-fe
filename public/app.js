// YouTube Video Handler
document.addEventListener('DOMContentLoaded', () => {
    const iframe = document.getElementById('youtubeVideo');
    
    // Kh√¥ng c·∫ßn thay ƒë·ªïi src v√¨ ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß params trong HTML
    console.log('‚úÖ Video src ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn trong HTML');
    
    // Log khi video load th√†nh c√¥ng
    iframe.addEventListener('load', () => {
        console.log('‚úÖ Video ƒë√£ load th√†nh c√¥ng');
    });
    
    // X·ª≠ l√Ω l·ªói
    iframe.addEventListener('error', () => {
        console.error('‚ùå Kh√¥ng th·ªÉ load video');
        showErrorMessage();
    });
    
    function showErrorMessage() {
        const videoWrapper = document.querySelector('.video-wrapper');
        videoWrapper.innerHTML = `
            <div style="
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                text-align: center;
                color: #fff;
                padding: 20px;
            ">
                <div style="font-size: 3rem; margin-bottom: 10px;">‚ö†Ô∏è</div>
                <div style="font-size: 1.1rem; margin-bottom: 10px;">Kh√¥ng th·ªÉ t·∫£i video</div>
                <a href="https://youtu.be/FfWQOxWCmuY" 
                   target="_blank"
                   style="
                       color: #4a9eff;
                       text-decoration: none;
                       padding: 10px 20px;
                       background: rgba(74, 158, 255, 0.2);
                       border-radius: 4px;
                       display: inline-block;
                       margin-top: 10px;
                   ">
                    Xem tr√™n YouTube
                </a>
            </div>
        `;
    }

    // PDF Viewer Handler
    const pdfButtons = document.querySelectorAll('.doc-btn');
    const pdfModal = document.getElementById('pdfModal');
    const pdfFrame = document.getElementById('pdfFrame');
    const pdfTitle = document.getElementById('pdfTitle');
    const closeModal = document.getElementById('closeModal');

    // Submenus
    const kyYeuSubmenu = document.getElementById('kyYeuSubmenu');
    const closeSubmenu = document.getElementById('closeSubmenu');

    const suDoanSubmenu = document.getElementById('suDoanSubmenu');
    const closeSuDoanSubmenu = document.getElementById('closeSuDoanSubmenu');

    const quanKhuSubmenu = document.getElementById('quanKhuSubmenu');
    const closeQuanKhuSubmenu = document.getElementById('closeQuanKhuSubmenu');

    const trungUongSubmenu = document.getElementById('trungUongSubmenu');
    const closeTrungUongSubmenu = document.getElementById('closeTrungUongSubmenu');

    // Mapping t√™n vƒÉn b·∫£n
    const documentTitles = {
        'chuong_trinh_hoi_nghi.pdf': 'CH∆Ø∆†NG TR√åNH H·ªòI NGH·ªä',
        'van_ban_qutw.pdf': 'VƒÇN B·∫¢N QUTW, BQP',
        'bao_cao_tong_ket_quan_khu.pdf': 'B√ÅO C√ÅO T·ªîNG K·∫æT QU√ÇN KHU',
        'bao_cao_tong_ket_su_doan.pdf': 'B√ÅO C√ÅO T·ªîNG K·∫æT S∆Ø ƒêO√ÄN',
        'ky_yeu.pdf': 'K·ª∂ Y·∫æU',
        'su_doan/su_doan_1.pdf': 'VƒÇN B·∫¢N 1 - THAM LU·∫¨N S∆Ø ƒêO√ÄN',
        'su_doan/su_doan_2.pdf': 'VƒÇN B·∫¢N 2 - THAM LU·∫¨N S∆Ø ƒêO√ÄN',
        'su_doan/su_doan_3.pdf': 'VƒÇN B·∫¢N 3 - THAM LU·∫¨N S∆Ø ƒêO√ÄN',
        'su_doan/su_doan_4.pdf': 'VƒÇN B·∫¢N 4 - THAM LU·∫¨N S∆Ø ƒêO√ÄN',
        'su_doan/su_doan_5.pdf': 'VƒÇN B·∫¢N 5 - THAM LU·∫¨N S∆Ø ƒêO√ÄN',
        'quan_khu/quan_khu_1.pdf': 'VƒÇN B·∫¢N 1 - THAM LU·∫¨N QU√ÇN KHU',
        'quan_khu/quan_khu_2.pdf': 'VƒÇN B·∫¢N 2 - THAM LU·∫¨N QU√ÇN KHU',
        'quan_khu/quan_khu_3.pdf': 'VƒÇN B·∫¢N 3 - THAM LU·∫¨N QU√ÇN KHU',
        'trung_uong/tw_1.pdf': 'VƒÇN B·∫¢N 1 - THAM LU·∫¨N TRUNG ∆Ø∆†NG',
        'trung_uong/tw_2.pdf': 'VƒÇN B·∫¢N 2 - THAM LU·∫¨N TRUNG ∆Ø∆†NG',
        'trung_uong/tw_3.pdf': 'VƒÇN B·∫¢N 3 - THAM LU·∫¨N TRUNG ∆Ø∆†NG',
        'trung_uong/tw_4.pdf': 'VƒÇN B·∫¢N 4 - THAM LU·∫¨N TRUNG ∆Ø∆†NG'
    };

    // X·ª≠ l√Ω click v√†o n√∫t vƒÉn b·∫£n
    pdfButtons.forEach(button => {
        button.addEventListener('click', () => {
            const pdfFile = button.getAttribute('data-pdf');

            // M·ªü K·ª∂ Y·∫æU submenu
            if (pdfFile === 'ky_yeu.pdf') {
                kyYeuSubmenu.classList.add('active');
                document.body.style.overflow = 'hidden';
                return;
            }

            openPdf(pdfFile);
        });
    });

    function openPdf(pdfFile) {
        const title = documentTitles[pdfFile] || 'VƒÉn b·∫£n';
        pdfTitle.textContent = title;

        // S·ª≠ d·ª•ng view=FitV ƒë·ªÉ fit theo chi·ªÅu d·ªçc, ƒë·∫£m b·∫£o ti√™u ƒë·ªÅ kh√¥ng b·ªã c·∫Øt
        // zoom=auto ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh t·ª∑ l·ªá ph√π h·ª£p
        const encoded = encodeURI(pdfFile);
        const viewerUrl = `${encoded}#view=FitV&toolbar=0&navpanes=0&statusbar=0&zoom=auto`;
        pdfFrame.src = viewerUrl;
        pdfModal.classList.add('active');
        document.body.style.overflow = 'hidden';
        console.log('üìÑ ƒêang m·ªü:', title);
    }

    // ƒê√≥ng modal
    function closePdfModal() {
        pdfModal.classList.remove('active');
        document.body.style.overflow = '';
        pdfFrame.src = '';
    }

    closeModal.addEventListener('click', closePdfModal);

    // ƒê√≥ng khi click v√†o overlay
    pdfModal.addEventListener('click', (e) => {
        if (e.target === pdfModal) {
            closePdfModal();
        }
    });

    // Close KY YEU submenu
    function closeKyYeuSubmenu() {
        kyYeuSubmenu.classList.remove('active');
        document.body.style.overflow = '';
    }

    // Close SU DOAN submenu
    function closeSuDoanSubmenuFunc() {
        suDoanSubmenu.classList.remove('active');
        document.body.style.overflow = '';
    }

    // Close QUAN KHU submenu
    function closeQuanKhuSubmenuFunc() {
        quanKhuSubmenu.classList.remove('active');
        document.body.style.overflow = '';
    }

    // Close TRUNG UONG submenu
    function closeTrungUongSubmenuFunc() {
        trungUongSubmenu.classList.remove('active');
        document.body.style.overflow = '';
    }

    // Close all submenus function
    function closeAllSubmenus() {
        closeKyYeuSubmenu();
        closeSuDoanSubmenuFunc();
        closeQuanKhuSubmenuFunc();
        closeTrungUongSubmenuFunc();
    }

    // Event listeners for close buttons
    closeSubmenu?.addEventListener('click', closeKyYeuSubmenu);
    closeSuDoanSubmenu?.addEventListener('click', closeSuDoanSubmenuFunc);
    closeQuanKhuSubmenu?.addEventListener('click', closeQuanKhuSubmenuFunc);
    closeTrungUongSubmenu?.addEventListener('click', closeTrungUongSubmenuFunc);

    // Event listeners for clicking outside
    kyYeuSubmenu?.addEventListener('click', (e) => {
        if (e.target === kyYeuSubmenu) {
            closeKyYeuSubmenu();
        }
    });

    suDoanSubmenu?.addEventListener('click', (e) => {
        if (e.target === suDoanSubmenu) {
            closeSuDoanSubmenuFunc();
        }
    });

    quanKhuSubmenu?.addEventListener('click', (e) => {
        if (e.target === quanKhuSubmenu) {
            closeQuanKhuSubmenuFunc();
        }
    });

    trungUongSubmenu?.addEventListener('click', (e) => {
        if (e.target === trungUongSubmenu) {
            closeTrungUongSubmenuFunc();
        }
    });

    // Handle submenu item clicks
    document.querySelectorAll('.submenu-btn')?.forEach(btn => {
        btn.addEventListener('click', () => {
            const pdf = btn.getAttribute('data-pdf');
            const submenu = btn.getAttribute('data-submenu');

            // ƒê√≥ng t·∫•t c·∫£ c√°c submenu hi·ªán t·∫°i
            closeAllSubmenus();

            if (pdf) {
                // N·∫øu c√≥ data-pdf, m·ªü PDF
                openPdf(pdf);
            } else if (submenu) {
                // N·∫øu c√≥ data-submenu, m·ªü submenu t∆∞∆°ng ·ª©ng
                switch(submenu) {
                    case 'suDoan':
                        suDoanSubmenu.classList.add('active');
                        document.body.style.overflow = 'hidden';
                        break;
                    case 'quanKhu':
                        quanKhuSubmenu.classList.add('active');
                        document.body.style.overflow = 'hidden';
                        break;
                    case 'trungUong':
                        trungUongSubmenu.classList.add('active');
                        document.body.style.overflow = 'hidden';
                        break;
                }
            }
        });
    });

    // ƒê√≥ng khi nh·∫•n ESC
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            if (pdfModal.classList.contains('active')) {
                closePdfModal();
            } else if (kyYeuSubmenu.classList.contains('active')) {
                closeKyYeuSubmenu();
            } else if (suDoanSubmenu.classList.contains('active')) {
                closeSuDoanSubmenuFunc();
            } else if (quanKhuSubmenu.classList.contains('active')) {
                closeQuanKhuSubmenuFunc();
            } else if (trungUongSubmenu.classList.contains('active')) {
                closeTrungUongSubmenuFunc();
            }
        }
    });

    // X·ª≠ l√Ω l·ªói khi load PDF
    pdfFrame.addEventListener('error', () => {
        console.error('‚ùå Kh√¥ng th·ªÉ load PDF');
        alert('Kh√¥ng th·ªÉ t·∫£i vƒÉn b·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.');
        closePdfModal();
    });
});

// Responsive handling
let resizeTimer;
window.addEventListener('resize', () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
        console.log('üì± Window resized:', {
            width: window.innerWidth,
            height: window.innerHeight,
            orientation: window.innerWidth > window.innerHeight ? 'landscape' : 'portrait'
        });
    }, 250);
});

// Orientation change - removed iframe reload to prevent layout changes
window.addEventListener('orientationchange', () => {
    console.log('üîÑ Orientation changed');
    // Ch·ªâ log orientation change, kh√¥ng reload iframe ƒë·ªÉ tr√°nh gi·∫≠t giao di·ªán
});

// Prevent context menu on video (optional)
document.querySelector('.video-wrapper')?.addEventListener('contextmenu', (e) => {
    e.preventDefault();
});

// Page visibility - pause video when tab is hidden
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        console.log('üì¥ Page hidden');
    } else {
        console.log('üì∫ Page visible');
    }
});

// Log page load time
window.addEventListener('load', () => {
    const loadTime = performance.now();
    console.log(`‚ö° Page loaded in ${loadTime.toFixed(2)}ms`);
});

// Touch gestures for mobile
let touchStartY = 0;
let touchEndY = 0;

document.addEventListener('touchstart', (e) => {
    touchStartY = e.changedTouches[0].screenY;
}, { passive: true });

document.addEventListener('touchend', (e) => {
    touchEndY = e.changedTouches[0].screenY;
    handleSwipe();
}, { passive: true });

function handleSwipe() {
    const swipeDistance = touchEndY - touchStartY;
    
    // Swipe down to reload (only at top of page)
    if (window.scrollY === 0 && swipeDistance > 100) {
        console.log('üîÑ Pull to refresh');
        location.reload();
    }
}

// Keyboard shortcuts
document.addEventListener('keydown', (e) => {
    // F5 or Ctrl+R: Reload
    if (e.key === 'F5' || (e.ctrlKey && e.key === 'r')) {
        console.log('üîÑ Reloading page');
    }
    
    // Esc: Exit fullscreen
    if (e.key === 'Escape') {
        if (document.fullscreenElement) {
            document.exitFullscreen();
        }
    }
});

// Add smooth scroll behavior
document.documentElement.style.scrollBehavior = 'smooth';

// Log viewport info
console.log('üì± Device Info:', {
    userAgent: navigator.userAgent,
    platform: navigator.platform,
    screenWidth: window.screen.width,
    screenHeight: window.screen.height,
    viewport: {
        width: window.innerWidth,
        height: window.innerHeight
    }
});
